name: 50 DAST Scan Docker Image

on:
  workflow_dispatch:
    inputs:
      image-tag:
        type: string
        description: 'The name of the Docker image to scan'
        required: true
        default: 'ghcr.io/kbgr55/portafolio:main'

  workflow_call:
    inputs:
      image-tag:
        type: string
        description: 'The name of the Docker image to scan'
        required: true
        default: 'ghcr.io/kbgr55/portafolio:main'

jobs:
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-24.04
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start demo app container
        run: |
          docker rm demoApp || true
          docker run -d -p 3000:3000 --name demoApp ${{ inputs.image-tag }}

      - name: Wait for container to start
        run: |
          echo "Waiting for container to be ready on port 3000..."
          timeout 600 bash -c 'while [[ "$(curl -s -o /dev/null -w "%{http_code}" localhost:3000)" != "200" ]]; do sleep 5; done' || { echo "Container not ready after 600 seconds."; docker logs demoApp; exit 1; }

      - name: Test container
        run: curl -s localhost:3000/health

      - name: Pull and Run ZAP
        run: |
          docker run --rm -v $(pwd):/zap/wrk/:rw owasp/zap2docker-weekly zap-full-scan.py \
          -t http://localhost:3000 -r zap_report.html || exit 0

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: DAST_Report
          path: zap_report.html

      - name: Publish HTML report as workflow summary
        if: always()
        run: |
          echo "### Dynamic Application Security Testing Report" >> $GITHUB_STEP_SUMMARY
          echo "View the DAST report [here](./zap_report.html)." >> $GITHUB_STEP_SUMMARY

      - name: Stop and clean up Docker container
        if: always()
        run: |
          docker stop demoApp && docker rm demoApp
          docker container prune --force
          docker image prune --force